name: Create Release and Upload Build

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on tags like v1.0.0
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: write # Needed to create releases and upload assets

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Specify your Node.js version
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Archive production artifacts
        run: |
          # Create a directory to stage artifacts
          ARTIFACTS_DIR="release-payload"
          mkdir -p ${ARTIFACTS_DIR}

          # Copy necessary files and folders
          echo "Copying .next folder..."
          cp -r .next ${ARTIFACTS_DIR}/
          
          # Conditionally copy public folder
          if [ -d public ]; then 
            echo "Copying public folder..."
            cp -r public ${ARTIFACTS_DIR}/
          else
            echo "Public folder not found, skipping copy."
          fi
          
          echo "Copying package.json..."
          cp package.json ${ARTIFACTS_DIR}/

          # Conditionally copy next.config.js, next.config.mjs, or next.config.ts
          # Prioritize .js to ensure the correct file is used in deployment
          if [ -f next.config.js ]; then
            echo "Copying next.config.js..."
            cp next.config.js ${ARTIFACTS_DIR}/
          elif [ -f next.config.mjs ]; then
            echo "Copying next.config.mjs..."
            cp next.config.mjs ${ARTIFACTS_DIR}/
          elif [ -f next.config.ts ]; then
            echo "Copying next.config.ts..."
            cp next.config.ts ${ARTIFACTS_DIR}/
          else
            echo "next.config.js, next.config.mjs, or next.config.ts not found, skipping copy."
          fi
          
          echo "Copying apphosting.yaml..."
          cp apphosting.yaml ${ARTIFACTS_DIR}/

          echo "Copying Dockerfile..."
          if [ -f Dockerfile ]; then
            cp Dockerfile ${ARTIFACTS_DIR}/
          else
            echo "Dockerfile not found, skipping copy."
          fi

          echo "Copying .dockerignore..."
          if [ -f .dockerignore ]; then
            cp .dockerignore ${ARTIFACTS_DIR}/
          else
            echo ".dockerignore not found, skipping copy."
          fi

          echo "Copying docker-compose.yml..."
          if [ -f docker-compose.yml ]; then
            cp docker-compose.yml ${ARTIFACTS_DIR}/
          else
            echo "docker-compose.yml not found, skipping copy."
          fi
          
          # Determine release properties based on trigger
          if [[ "${{ github.event_name }}" == "push" && "${{ startsWith(github.ref, 'refs/tags/v') }}" == "true" ]]; then
            # Triggered by a valid version tag push (e.g., v1.0.0)
            echo "Event is a valid version tag push."
            EFFECTIVE_TAG_NAME=${GITHUB_REF_NAME} # This will be 'vX.Y.Z'
            IS_PRERELEASE=false
            IS_DRAFT=false
            FINAL_RELEASE_NAME="Release ${EFFECTIVE_TAG_NAME}"
            FINAL_RELEASE_BODY="Official release for tag ${EFFECTIVE_TAG_NAME}."
          else
            # Triggered by workflow_dispatch or non-version-tag push
            echo "Event is not a version tag push. Creating a pre-release draft."
            TIMESTAMP_SUFFIX=$(date +%Y%m%d-%H%M%S)
            # GITHUB_REF_NAME could be the branch name (e.g., 'main') or empty for raw workflow_dispatch
            BASE_NAME=${GITHUB_REF_NAME:-manual}
            # Sanitize BASE_NAME to be a valid tag part (replace slashes etc.)
            SANITIZED_BASE_NAME=$(echo "${BASE_NAME}" | sed 's/[^a-zA-Z0-9.-]/-/g' | sed 's/--*/-/g' | sed 's/^-*//;s/-*$//')
            EFFECTIVE_TAG_NAME="${SANITIZED_BASE_NAME}-build-${TIMESTAMP_SUFFIX}"

            IS_PRERELEASE=true
            IS_DRAFT=true # Manual/dev builds start as drafts
            FINAL_RELEASE_NAME="Build: ${EFFECTIVE_TAG_NAME}"
            FINAL_RELEASE_BODY="Automated build. Trigger: ${{ github.event_name }}. Ref: ${{ github.ref_name }}. SHA: ${{ github.sha }}."
          fi
          
          echo "EFFECTIVE_TAG_NAME=${EFFECTIVE_TAG_NAME}" >> $GITHUB_ENV
          echo "IS_PRERELEASE=${IS_PRERELEASE}" >> $GITHUB_ENV
          echo "IS_DRAFT=${IS_DRAFT}" >> $GITHUB_ENV
          # Using a delimiter for multi-line body
          echo "FINAL_RELEASE_BODY<<EOF_RELEASE_BODY" >> $GITHUB_ENV
          echo "${FINAL_RELEASE_BODY}" >> $GITHUB_ENV
          echo "EOF_RELEASE_BODY" >> $GITHUB_ENV

          ARCHIVE_NAME="app-release-${EFFECTIVE_TAG_NAME}.zip"
          
          echo "Creating archive ${ARCHIVE_NAME}..."
          cd ${ARTIFACTS_DIR}
          zip -r ../${ARCHIVE_NAME} .
          cd ..
          echo "Archive created successfully."
          echo "ARCHIVE_PATH=$(pwd)/${ARCHIVE_NAME}" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ARCHIVE_PATH }}
          tag_name: ${{ env.EFFECTIVE_TAG_NAME }}
          name: ${{ env.FINAL_RELEASE_NAME }}
          body: ${{ env.FINAL_RELEASE_BODY }}
          draft: ${{ env.IS_DRAFT }}
          prerelease: ${{ env.IS_PRERELEASE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
